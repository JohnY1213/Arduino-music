#include <Servo.h>

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
#define REST      0

int LEDState = LOW;         
int buttonState1 = LOW; 
int buttonState2 = LOW; 
int buttonState3 = LOW;
int buttonState4 = LOW;    
int lastButtonState = LOW;
unsigned long myTime;
const int servoPin = 11;
const int buttonPin1 = 4;
const int buttonPin2 = 13;
const int buttonPin3 = 8;
const int buttonPin4 = 7;
int tempo = 100;
int buzzer = A0;
Servo servo;
int buttonState = 0;
const int LED1 = 10; 
const int LED2 = 9; 
const int LED3 = 6;
const int LED4 = 5;
int angle=0;
int t=0;
bool power;

int period = 500;
unsigned long time_now = 0;
bool TC = false;



int melody[] = {

  NOTE_FS4,2, NOTE_E4,2,
  NOTE_D4,2, NOTE_CS4,2,
  NOTE_B3,2, NOTE_A3,2,
  NOTE_B3,2, NOTE_CS4,2,
  NOTE_FS4,2, NOTE_E4,2,
  NOTE_D4,2, NOTE_CS4,2,
  NOTE_B3,2, NOTE_A3,2,
  NOTE_B3,2, NOTE_CS4,2,
  NOTE_D4,2, NOTE_CS4,2,
  NOTE_B3,2, NOTE_A3,2,
  NOTE_G3,2, NOTE_FS3,2,
  NOTE_G3,2, NOTE_A3,2,

  NOTE_D4,4, NOTE_FS4,8, NOTE_G4,8, NOTE_A4,4, NOTE_FS4,8, NOTE_G4,8, 
  NOTE_A4,4, NOTE_B3,8, NOTE_CS4,8, NOTE_D4,8, NOTE_E4,8, NOTE_FS4,8, NOTE_G4,8, 
  NOTE_FS4,4, NOTE_D4,8, NOTE_E4,8, NOTE_FS4,4, NOTE_FS3,8, NOTE_G3,8,
  NOTE_A3,8, NOTE_G3,8, NOTE_FS3,8, NOTE_G3,8, NOTE_A3,2,
  NOTE_G3,4, NOTE_B3,8, NOTE_A3,8, NOTE_G3,4, NOTE_FS3,8, NOTE_E3,8, 
  NOTE_FS3,4, NOTE_D3,8, NOTE_E3,8, NOTE_FS3,8, NOTE_G3,8, NOTE_A3,8, NOTE_B3,8,

  NOTE_G3,4, NOTE_B3,8, NOTE_A3,8, NOTE_B3,4, NOTE_CS4,8, NOTE_D4,8,
  NOTE_A3,8, NOTE_B3,8, NOTE_CS4,8, NOTE_D4,8, NOTE_E4,8, NOTE_FS4,8, NOTE_G4,8, NOTE_A4,2,
  NOTE_A4,4, NOTE_FS4,8, NOTE_G4,8, NOTE_A4,4,
  NOTE_FS4,8, NOTE_G4,8, NOTE_A4,8, NOTE_A3,8, NOTE_B3,8, NOTE_CS4,8,
  NOTE_D4,8, NOTE_E4,8, NOTE_FS4,8, NOTE_G4,8, NOTE_FS4,4, NOTE_D4,8, NOTE_E4,8,
  NOTE_FS4,8, NOTE_CS4,8, NOTE_A3,8, NOTE_A3,8,

  NOTE_CS4,4, NOTE_B3,4, NOTE_D4,8, NOTE_CS4,8, NOTE_B3,4,
  NOTE_A3,8, NOTE_G3,8, NOTE_A3,4, NOTE_D3,8, NOTE_E3,8, NOTE_FS3,8, NOTE_G3,8,
  NOTE_A3,8, NOTE_B3,4, NOTE_G3,4, NOTE_B3,8, NOTE_A3,8, NOTE_B3,4,
  NOTE_CS4,8, NOTE_D4,8, NOTE_A3,8, NOTE_B3,8, NOTE_CS4,8, NOTE_D4,8, NOTE_E4,8,
  NOTE_FS4,8, NOTE_G4,8, NOTE_A4,2,  
};


int notes = sizeof(melody) / sizeof(melody[0]) / 2;

int wholenote = (60000 * 4) / tempo;

int divider = 0, noteDuration = 0;


void setup() {


Serial.begin(115200);
servo.attach(servoPin);
pinMode (LED1, OUTPUT);
pinMode (LED2, OUTPUT);
pinMode (LED3, OUTPUT);
pinMode (LED4, OUTPUT);
pinMode(buttonPin1, INPUT);
pinMode(buttonPin2, INPUT);
pinMode(buttonPin3, INPUT);
pinMode(buttonPin4, INPUT);
servo.write(0);



 
}








bool num = false;
void loop() {
  
buttonState1 = digitalRead(buttonPin1);
buttonState2 = digitalRead(buttonPin2);
buttonState3 = digitalRead(buttonPin3);
buttonState4 = digitalRead(buttonPin4);

delay (10); 

  
  if (buttonState1 == HIGH && lastButtonState == LOW) { 
    LEDState = !LEDState; 
  } 

  lastButtonState = buttonState1; 
  
  
  if (LEDState == 1) { 
    digitalWrite (LED1, HIGH);
    digitalWrite (LED2, HIGH);
    digitalWrite (LED3, HIGH);
    digitalWrite (LED4, HIGH);
  if(buttonState2 == HIGH){
      num = true;    
      }
    
      while(num){
        digitalWrite (LED1, LOW);
    digitalWrite (LED2, LOW);
    digitalWrite (LED3, LOW);
    digitalWrite (LED4, LOW);
        num=false;
        for (int thisNote = 0; thisNote < notes * 2; thisNote = thisNote + 2) {
            
   
    divider = melody[thisNote + 1];
    int RDnum = 0;
    servo.write(thisNote/1.5);
    if(thisNote%2==0 ){
             RDnum = random(0,7);
             Serial.print(RDnum);
             TC=true;
      }
   
    
        if(RDnum == 0){
          
          
          }
        if(RDnum == 1 && TC==true){
          buttonState1 = digitalRead(buttonPin1);
          
          time_now = millis();
          
          while(buttonState1 == LOW ){
            digitalWrite (LED1, HIGH);
            buttonState1 = digitalRead(buttonPin1);
            buttonState2 = digitalRead(buttonPin2);
            buttonState3 = digitalRead(buttonPin3);
            buttonState4 = digitalRead(buttonPin4);
            
            if(buttonState1 == HIGH){
              digitalWrite (LED1, LOW);
              TC=false;          
            }
            if(buttonState2 == HIGH||buttonState3 == HIGH||buttonState4 == HIGH){
              servo.write(0);
              noTone(buzzer);
              num = false;
              delay(1000);
              buttonState2 = digitalRead(buttonPin2);
               return;
              
              }
            
            if(millis() > time_now + period){
              servo.write(0);
              noTone(buzzer);
              num = false;
               return; 
              
              }
             
            
            }          
          }
          if(RDnum == 2 && TC==true){
          buttonState2 = digitalRead(buttonPin2);
          time_now = millis();
          
          while(buttonState2 == LOW ){
            digitalWrite (LED2, HIGH);
            buttonState1 = digitalRead(buttonPin1);
            buttonState2 = digitalRead(buttonPin2);
            buttonState3 = digitalRead(buttonPin3);
            buttonState4 = digitalRead(buttonPin4);
            buttonState2 = digitalRead(buttonPin2);
            if(buttonState2 == HIGH){
              
              digitalWrite (LED2, LOW);
              TC=false;          
            }
            if(buttonState1 == HIGH||buttonState3 == HIGH||buttonState4 == HIGH){
              servo.write(0);
              noTone(buzzer);
              num = false;
              delay(1000);
              buttonState2 = digitalRead(buttonPin2);
               return;
              
              }
            if(millis() > time_now + period){
              servo.write(0);
              noTone(buzzer);
              num = false;
               return; 
              
              }
            
            }          
          }
          if(RDnum == 3 && TC==true){
          buttonState3 = digitalRead(buttonPin3);
          time_now = millis();
          
          while(buttonState3 == LOW ){
            digitalWrite (LED3, HIGH);
            buttonState1 = digitalRead(buttonPin1);
            buttonState2 = digitalRead(buttonPin2);
            buttonState3 = digitalRead(buttonPin3);
            buttonState4 = digitalRead(buttonPin4);
            buttonState3 = digitalRead(buttonPin3);
            if(buttonState3 == HIGH){
              digitalWrite (LED3, LOW);
              TC=false;          
            }
            if(buttonState2 == HIGH||buttonState1 == HIGH||buttonState4 == HIGH){
              servo.write(0);
              noTone(buzzer);
              num = false;
              delay(100);
              buttonState2 = digitalRead(buttonPin2);
               return;
              
              }
            if(millis() > time_now + period){
              servo.write(0);
              noTone(buzzer);
              num = false;
               return; 
              
              }
            
            }          
          }
          if(RDnum == 4 && TC==true){
          buttonState4 = digitalRead(buttonPin4);
          time_now = millis();
          
          while(buttonState4 == LOW ){
            digitalWrite (LED4, HIGH);
            buttonState1 = digitalRead(buttonPin1);
            buttonState2 = digitalRead(buttonPin2);
            buttonState3 = digitalRead(buttonPin3);
            buttonState4 = digitalRead(buttonPin4);
            buttonState4 = digitalRead(buttonPin4);
            if(buttonState4 == HIGH){
              digitalWrite (LED4, LOW);
              TC=false;          
            }
            if(buttonState2 == HIGH||buttonState3 == HIGH||buttonState1 == HIGH){
              servo.write(0);
              noTone(buzzer);
              num = false;
              delay(1000);
              buttonState2 = digitalRead(buttonPin2);
               return;
              
              }
            if(millis() > time_now + period){
              servo.write(0);
              noTone(buzzer);
              num = false;
               return; 
              
              }
            
            }          
          }  





         
    
        if(thisNote >= 246){
          delay(2000);
          servo.write(0);
          //num = false;
          //break;
        
          }    
    
    if (divider > 0) {
     
      noteDuration = (wholenote) / divider;
    } else if (divider < 0) {
      
      noteDuration = (wholenote) / abs(divider);
      noteDuration *= 1.5; 
    }

    
    tone(buzzer, melody[thisNote], noteDuration * 0.9);
   
    delay(noteDuration);
    
    noTone(buzzer);

}

               
        }

       
    
  } 
  else{
    digitalWrite (LED1, LOW);
    digitalWrite (LED2, LOW);
    digitalWrite (LED3, LOW);
    digitalWrite (LED4, LOW);
    
    }
  
 
  }
    


 
